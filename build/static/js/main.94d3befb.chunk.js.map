{"version":3,"sources":["graphql/types.tsx","authUtils.tsx","components/DCTextField.tsx","pages/LoginPage.tsx","theme.ts","pages/AccountPage.tsx","pages/CurrencyAccountPage.tsx","pages/AddCurrencyAccountPage.tsx","pages/TransactionPage.tsx","pages/SubmitTransactionPage.tsx","pages/MeLayout.tsx","pages/RegisterPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MeDocument","gql","CurrenciesDocument","AddCurrencyAccountDocument","CurrencyAccountsDocument","useCurrencyAccountsQuery","baseOptions","ApolloReactHooks","LoginDocument","RegisterDocument","SubmitTransactionDocument","OtherUsersDocument","TransactionsDocument","LOCAL_USER_ID","setLocalUser","user","localStorage","setItem","JSON","stringify","getLocalUser","localUserString","getItem","parse","deleteLocalUser","removeItem","RedirectWhenAuth","children","to","DCTextField","props","render","formikProps","TextField","field","form","errors","name","touched","value","length","style","color","useStyles","makeStyles","root","marginTop","paper","padding","orRegisterButton","textDecoration","LoginPage","classes","login","loginRes","data","Container","className","maxWidth","Grid","container","justify","item","md","Paper","href","onSubmit","values","variables","initialValues","email","password","formikBag","label","margin","type","fullWidth","textAlign","Button","variant","createMuiTheme","overrides","MuiButton","fontWeight","table","width","marginLeft","AccountPage","TableContainer","component","Table","aria-label","TableBody","TableRow","TableCell","scope","align","me","description","maxAmountPerTransactionDollar","card","minWidth","bullet","display","transform","title","fontSize","pos","marginBottom","CurrencyAccountPage","currencyAccounts","map","currencyAccount","Card","CardContent","Typography","currency","gutterBottom","walletId","balance","AddCurrencyAccountPage","currencies","useAddCurrencyAccountMutation","addCurrencyAccount","useState","currencyName","setCurrencyName","FormControl","InputLabel","Select","labelId","id","onChange","e","target","MenuItem","TransactionPage","transactions","console","log","TableHead","transaction","key","amount","source","createdAt","processedAt","state","error","SubmitTransactionPage","targetUserId","setTargetUserId","otherUsers","useSubmitTransactionMutation","submitTransaction","otherUser","theme","flexGrow","marginRight","spacing","menuItems","MeLayout","updateState","AppBar","position","Toolbar","link","el","index","onClick","exact","path","match","orLoginButton","RegisterPage","register","registerRes","a","async","App","enqueueSnackbar","useSnackbar","client","ApolloClient","uri","request","operation","localUser","token","setContext","headers","authorization","onError","err","graphQLErrors","message","anchorOrigin","vertical","horizontal","autoHideDuration","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94d3befb.chunk.js","sourcesContent":["/* eslint-disable */\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  /** Monetary value type */\n  Monetary: any,\n};\n\nexport type AuthResponse = {\n   __typename?: 'AuthResponse',\n  token: Scalars['String'],\n  user: User,\n};\n\nexport type Currency = {\n   __typename?: 'Currency',\n  exchangeRateDollar: Scalars['Float'],\n  id: Scalars['ID'],\n  name: Scalars['String'],\n};\n\nexport type CurrencyAccount = {\n   __typename?: 'CurrencyAccount',\n  balance: Scalars['Float'],\n  currency: Currency,\n  id: Scalars['ID'],\n  walletId: Scalars['String'],\n};\n\nexport type CurrencyAccountInput = {\n  balance: Scalars['Float'],\n  currencyName: Scalars['String'],\n  walletId: Scalars['String'],\n};\n\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  addCurrencyAccount: User,\n  deleteCurrencyAccount: User,\n  dropAndSeedDB: Scalars['Boolean'],\n  login: AuthResponse,\n  register: AuthResponse,\n  submitTransaction: Transaction,\n};\n\n\nexport type MutationAddCurrencyAccountArgs = {\n  data: CurrencyAccountInput\n};\n\n\nexport type MutationDeleteCurrencyAccountArgs = {\n  currencyName: Scalars['String']\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type MutationRegisterArgs = {\n  data: RegisterInput\n};\n\n\nexport type MutationSubmitTransactionArgs = {\n  data: SubmitTransactionInput\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  currencies: Array<Currency>,\n  me: User,\n  otherUsers: Array<User>,\n  transaction: Transaction,\n  transactions: Array<Transaction>,\n};\n\n\nexport type QueryTransactionArgs = {\n  transactionId: Scalars['String']\n};\n\nexport type RegisterInput = {\n  description?: Maybe<Scalars['String']>,\n  email: Scalars['String'],\n  maxAmountPerTransactionDollar: Scalars['Float'],\n  name: Scalars['String'],\n  password: Scalars['String'],\n};\n\nexport type SubmitTransactionInput = {\n  amount: Scalars['Float'],\n  currencyName: Scalars['String'],\n  targetUserId: Scalars['String'],\n};\n\nexport type Transaction = {\n   __typename?: 'Transaction',\n  amount: Scalars['Float'],\n  createdAt: Scalars['String'],\n  currency: Currency,\n  error?: Maybe<Scalars['String']>,\n  id: Scalars['ID'],\n  processedAt?: Maybe<Scalars['String']>,\n  source: User,\n  state: Scalars['String'],\n  target: User,\n};\n\nexport type User = {\n   __typename?: 'User',\n  currencyAccounts: Array<CurrencyAccount>,\n  description?: Maybe<Scalars['String']>,\n  email: Scalars['String'],\n  id: Scalars['ID'],\n  maxAmountPerTransactionDollar: Scalars['Float'],\n  name: Scalars['String'],\n};\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'email' | 'maxAmountPerTransactionDollar' | 'description'>\n  ) }\n);\n\nexport type CurrenciesQueryVariables = {};\n\n\nexport type CurrenciesQuery = (\n  { __typename?: 'Query' }\n  & { currencies: Array<(\n    { __typename?: 'Currency' }\n    & Pick<Currency, 'id' | 'name' | 'exchangeRateDollar'>\n  )> }\n);\n\nexport type AddCurrencyAccountMutationVariables = {\n  data: CurrencyAccountInput\n};\n\n\nexport type AddCurrencyAccountMutation = (\n  { __typename?: 'Mutation' }\n  & { addCurrencyAccount: (\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  ) }\n);\n\nexport type CurrencyAccountsQueryVariables = {};\n\n\nexport type CurrencyAccountsQuery = (\n  { __typename?: 'Query' }\n  & { me: (\n    { __typename?: 'User' }\n    & { currencyAccounts: Array<(\n      { __typename?: 'CurrencyAccount' }\n      & Pick<CurrencyAccount, 'id' | 'balance' | 'walletId'>\n      & { currency: (\n        { __typename?: 'Currency' }\n        & Pick<Currency, 'name' | 'exchangeRateDollar'>\n      ) }\n    )> }\n  ) }\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'token'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'name'>\n    ) }\n  ) }\n);\n\nexport type RegisterMutationVariables = {\n  data: RegisterInput\n};\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'token'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'name'>\n    ) }\n  ) }\n);\n\nexport type SubmitTransactionMutationVariables = {\n  data: SubmitTransactionInput\n};\n\n\nexport type SubmitTransactionMutation = (\n  { __typename?: 'Mutation' }\n  & { submitTransaction: (\n    { __typename?: 'Transaction' }\n    & Pick<Transaction, 'id'>\n  ) }\n);\n\nexport type OtherUsersQueryVariables = {};\n\n\nexport type OtherUsersQuery = (\n  { __typename?: 'Query' }\n  & { otherUsers: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name'>\n  )> }\n);\n\nexport type TransactionsQueryVariables = {};\n\n\nexport type TransactionsQuery = (\n  { __typename?: 'Query' }\n  & { transactions: Array<(\n    { __typename?: 'Transaction' }\n    & Pick<Transaction, 'id' | 'amount' | 'createdAt' | 'processedAt' | 'state' | 'error'>\n    & { currency: (\n      { __typename?: 'Currency' }\n      & Pick<Currency, 'name'>\n    ), target: (\n      { __typename?: 'User' }\n      & Pick<User, 'name'>\n    ), source: (\n      { __typename?: 'User' }\n      & Pick<User, 'name'>\n    ) }\n  )> }\n);\n\n\nexport const MeDocument = gql`\n    query me {\n  me {\n    id\n    name\n    email\n    maxAmountPerTransactionDollar\n    description\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const CurrenciesDocument = gql`\n    query currencies {\n  currencies {\n    id\n    name\n    exchangeRateDollar\n  }\n}\n    `;\n\n/**\n * __useCurrenciesQuery__\n *\n * To run a query within a React component, call `useCurrenciesQuery` and pass it any options that fit your needs.\n * When your component renders, `useCurrenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCurrenciesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCurrenciesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CurrenciesQuery, CurrenciesQueryVariables>) {\n        return ApolloReactHooks.useQuery<CurrenciesQuery, CurrenciesQueryVariables>(CurrenciesDocument, baseOptions);\n      }\nexport function useCurrenciesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CurrenciesQuery, CurrenciesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CurrenciesQuery, CurrenciesQueryVariables>(CurrenciesDocument, baseOptions);\n        }\nexport type CurrenciesQueryHookResult = ReturnType<typeof useCurrenciesQuery>;\nexport type CurrenciesLazyQueryHookResult = ReturnType<typeof useCurrenciesLazyQuery>;\nexport type CurrenciesQueryResult = ApolloReactCommon.QueryResult<CurrenciesQuery, CurrenciesQueryVariables>;\nexport const AddCurrencyAccountDocument = gql`\n    mutation addCurrencyAccount($data: CurrencyAccountInput!) {\n  addCurrencyAccount(data: $data) {\n    id\n  }\n}\n    `;\nexport type AddCurrencyAccountMutationFn = ApolloReactCommon.MutationFunction<AddCurrencyAccountMutation, AddCurrencyAccountMutationVariables>;\n\n/**\n * __useAddCurrencyAccountMutation__\n *\n * To run a mutation, you first call `useAddCurrencyAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCurrencyAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCurrencyAccountMutation, { data, loading, error }] = useAddCurrencyAccountMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useAddCurrencyAccountMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddCurrencyAccountMutation, AddCurrencyAccountMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddCurrencyAccountMutation, AddCurrencyAccountMutationVariables>(AddCurrencyAccountDocument, baseOptions);\n      }\nexport type AddCurrencyAccountMutationHookResult = ReturnType<typeof useAddCurrencyAccountMutation>;\nexport type AddCurrencyAccountMutationResult = ApolloReactCommon.MutationResult<AddCurrencyAccountMutation>;\nexport type AddCurrencyAccountMutationOptions = ApolloReactCommon.BaseMutationOptions<AddCurrencyAccountMutation, AddCurrencyAccountMutationVariables>;\nexport const CurrencyAccountsDocument = gql`\n    query currencyAccounts {\n  me {\n    currencyAccounts {\n      id\n      balance\n      walletId\n      currency {\n        name\n        exchangeRateDollar\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useCurrencyAccountsQuery__\n *\n * To run a query within a React component, call `useCurrencyAccountsQuery` and pass it any options that fit your needs.\n * When your component renders, `useCurrencyAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCurrencyAccountsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCurrencyAccountsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CurrencyAccountsQuery, CurrencyAccountsQueryVariables>) {\n        return ApolloReactHooks.useQuery<CurrencyAccountsQuery, CurrencyAccountsQueryVariables>(CurrencyAccountsDocument, baseOptions);\n      }\nexport function useCurrencyAccountsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CurrencyAccountsQuery, CurrencyAccountsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CurrencyAccountsQuery, CurrencyAccountsQueryVariables>(CurrencyAccountsDocument, baseOptions);\n        }\nexport type CurrencyAccountsQueryHookResult = ReturnType<typeof useCurrencyAccountsQuery>;\nexport type CurrencyAccountsLazyQueryHookResult = ReturnType<typeof useCurrencyAccountsLazyQuery>;\nexport type CurrencyAccountsQueryResult = ApolloReactCommon.QueryResult<CurrencyAccountsQuery, CurrencyAccountsQueryVariables>;\nexport const LoginDocument = gql`\n    mutation login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    token\n    user {\n      id\n      name\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation register($data: RegisterInput!) {\n  register(data: $data) {\n    token\n    user {\n      id\n      name\n    }\n  }\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const SubmitTransactionDocument = gql`\n    mutation submitTransaction($data: SubmitTransactionInput!) {\n  submitTransaction(data: $data) {\n    id\n  }\n}\n    `;\nexport type SubmitTransactionMutationFn = ApolloReactCommon.MutationFunction<SubmitTransactionMutation, SubmitTransactionMutationVariables>;\n\n/**\n * __useSubmitTransactionMutation__\n *\n * To run a mutation, you first call `useSubmitTransactionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSubmitTransactionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [submitTransactionMutation, { data, loading, error }] = useSubmitTransactionMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useSubmitTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubmitTransactionMutation, SubmitTransactionMutationVariables>) {\n        return ApolloReactHooks.useMutation<SubmitTransactionMutation, SubmitTransactionMutationVariables>(SubmitTransactionDocument, baseOptions);\n      }\nexport type SubmitTransactionMutationHookResult = ReturnType<typeof useSubmitTransactionMutation>;\nexport type SubmitTransactionMutationResult = ApolloReactCommon.MutationResult<SubmitTransactionMutation>;\nexport type SubmitTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<SubmitTransactionMutation, SubmitTransactionMutationVariables>;\nexport const OtherUsersDocument = gql`\n    query otherUsers {\n  otherUsers {\n    id\n    name\n  }\n}\n    `;\n\n/**\n * __useOtherUsersQuery__\n *\n * To run a query within a React component, call `useOtherUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useOtherUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useOtherUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useOtherUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<OtherUsersQuery, OtherUsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<OtherUsersQuery, OtherUsersQueryVariables>(OtherUsersDocument, baseOptions);\n      }\nexport function useOtherUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<OtherUsersQuery, OtherUsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<OtherUsersQuery, OtherUsersQueryVariables>(OtherUsersDocument, baseOptions);\n        }\nexport type OtherUsersQueryHookResult = ReturnType<typeof useOtherUsersQuery>;\nexport type OtherUsersLazyQueryHookResult = ReturnType<typeof useOtherUsersLazyQuery>;\nexport type OtherUsersQueryResult = ApolloReactCommon.QueryResult<OtherUsersQuery, OtherUsersQueryVariables>;\nexport const TransactionsDocument = gql`\n    query transactions {\n  transactions {\n    id\n    amount\n    currency {\n      name\n    }\n    createdAt\n    processedAt\n    target {\n      name\n    }\n    source {\n      name\n    }\n    state\n    error\n  }\n}\n    `;\n\n/**\n * __useTransactionsQuery__\n *\n * To run a query within a React component, call `useTransactionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTransactionsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTransactionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useTransactionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TransactionsQuery, TransactionsQueryVariables>) {\n        return ApolloReactHooks.useQuery<TransactionsQuery, TransactionsQueryVariables>(TransactionsDocument, baseOptions);\n      }\nexport function useTransactionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TransactionsQuery, TransactionsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TransactionsQuery, TransactionsQueryVariables>(TransactionsDocument, baseOptions);\n        }\nexport type TransactionsQueryHookResult = ReturnType<typeof useTransactionsQuery>;\nexport type TransactionsLazyQueryHookResult = ReturnType<typeof useTransactionsLazyQuery>;\nexport type TransactionsQueryResult = ApolloReactCommon.QueryResult<TransactionsQuery, TransactionsQueryVariables>;","import React from \"react\";\nimport { Redirect } from \"react-router\";\n\nconst LOCAL_USER_ID = 'local_user';\n\ninterface LocalUser {\n    token: string\n    user: {\n        id: string\n    }\n}\n\nexport function setLocalUser(user: LocalUser) {\n    localStorage.setItem(LOCAL_USER_ID, JSON.stringify(user));\n}\n\nexport function getLocalUser(): LocalUser | null {\n    const localUserString = localStorage.getItem(LOCAL_USER_ID);\n    if(!localUserString) {\n        return null;\n    }\n    return JSON.parse(localUserString) as LocalUser;\n}\n\nexport function deleteLocalUser() {\n    localStorage.removeItem(LOCAL_USER_ID);\n}\n\n\nexport const RedirectWhenAuth : React.FC<{}> = ({children}) => {\n\n    if(getLocalUser())\n        return <Redirect to='me/account'/>\n\n    return <div>{children}</div>;\n}","import React from 'react';\nimport { Field, FormikProps, FieldProps, FieldAttributes } from 'formik';\nimport { TextField } from '@material-ui/core';\nimport { TextFieldProps, StandardTextFieldProps } from '@material-ui/core/TextField';\n\nexport type DCTextFieldProps = StandardTextFieldProps;\n\nexport const DCTextField : React.FC<DCTextFieldProps> = (props: DCTextFieldProps) => {\n    \n    return (\n        <Field\n            \n            {...props}\n            render={(formikProps: FieldProps<any>) => {\n                return (\n                    <div>\n                        <TextField {...formikProps.field} {...props} />\n                        { formikProps.form.errors[formikProps.field.name] && formikProps.form.touched[formikProps.field.name] &&\n                         formikProps.field.value && (formikProps.field.value as string).length > 0 &&\n                            <div style={{color:'red'}}>{formikProps.form.errors[formikProps.field.name]}</div>\n                        }\n                    </div>\n                );\n            }}\n        />  \n    );\n}","import Container from '@material-ui/core/Container';\nimport React, { useState } from 'react';\nimport { Grid, Paper, Box, TextField, Button, makeStyles } from '@material-ui/core';\nimport gql from 'graphql-tag';\nimport { useLoginMutation } from '../graphql/types';\nimport { RedirectWhenAuth, setLocalUser } from '../authUtils';\nimport { Formik, withFormik, FormikProps, Form, Field } from \"formik\";\nimport { DCTextField } from '../components/DCTextField';\n\nconst useStyles = makeStyles({\n    root: {\n        marginTop: 100\n    },\n    paper: {\n        padding: 20\n    },\n    orRegisterButton: {\n        textDecoration:\"none\",\n        color: '#005ff8'\n    }\n})\n\nexport const LoginPage : React.FC = () => {\n\n    const classes = useStyles();\n\n    gql` mutation login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token,\n            user {\n                id,\n                name\n            }\n        }\n    }  \n    `;\n\n    const [login, loginRes] = useLoginMutation();\n    \n    if(loginRes.data) {\n        setLocalUser(loginRes.data.login);\n    }\n\n    return (\n        <RedirectWhenAuth>\n            <Container className={classes.root} maxWidth=\"md\">\n                <Grid container justify=\"center\">\n                    <Grid item md={6}>\n                        <Paper className={classes.paper}>\n                            <h3>Login</h3>\n                            <span>\n                                or \n                                <a href=\"/register\" className={classes.orRegisterButton}> create a new account</a>\n                            </span>\n                            <Formik \n                                onSubmit={(values) => login({ variables: values})}\n                                initialValues={{\n                                    email: \"\",\n                                    password: \"\"\n                                }}\n                                render= {(formikBag) => (\n                                    <Form>\n                                        <DCTextField\n                                            label=\"E-Mail\"\n                                            name=\"email\"\n                                            margin=\"normal\"\n                                            type=\"email\"\n                                            fullWidth= {true}\n                                        />\n                                        <DCTextField\n                                            label=\"Password\"\n                                            name=\"password\"\n                                            margin=\"normal\"\n                                            type=\"password\"\n                                            fullWidth={true}\n                                        />\n                                        <div style={{textAlign: 'right'}}>\n                                        <Button variant=\"contained\" color=\"primary\" type='submit'>Login</Button>\n                                        </div>\n                                    </Form>\n                                )\n                            }/>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n        </RedirectWhenAuth>\n    );\n}","import { createMuiTheme } from \"@material-ui/core\";\n\nexport default createMuiTheme({\n    overrides: {\n        MuiButton: {\n            root: {\n            fontWeight: \"bold\",\n            margin: \"10px\",\n            \"&:hover\": {\n            }\n            }\n        }\n    }\n})\n","import { Container, CssBaseline, AppBar, Toolbar, Typography, Drawer, List, ListItem, Divider, Theme, Table, TableContainer, Paper, TableBody, TableRow, TableCell } from '@material-ui/core';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useMeQuery } from '../graphql/types';\n\nconst useStyles = makeStyles({\n    table: {\n      width: '40%',\n      marginLeft: '30%'\n    }\n});\n  \n  \nexport const AccountPage : React.FC = () => {\n\n    const classes = useStyles();\n\n    gql` query me {\n        me {\n            id,\n            name,\n            email,\n            maxAmountPerTransactionDollar,\n            description\n        }\n    }`\n\n    const { data } = useMeQuery();\n\n    return (\n        <main>\n            <h3>Your Account</h3>\n            <div>\n                { data &&\n                    (<TableContainer className={classes.table} component={Paper}>\n                        <Table aria-label=\"simple table\">\n                          <TableBody>\n                              <TableRow>\n                                <TableCell component=\"th\" scope=\"row\">Name</TableCell>\n                                <TableCell align=\"right\">{data.me.name}</TableCell>\n                              </TableRow>\n                              <TableRow>\n                                <TableCell component=\"th\" scope=\"row\">E-Mail</TableCell>\n                                <TableCell align=\"right\">{data.me.email}</TableCell>\n                              </TableRow>\n                              <TableRow>\n                                <TableCell component=\"th\" scope=\"row\">Description</TableCell>\n                                <TableCell align=\"right\">{data.me.description}</TableCell>\n                              </TableRow>\n                              <TableRow>\n                                <TableCell component=\"th\" scope=\"row\">Max amount per transaction ($)</TableCell>\n                                <TableCell align=\"right\">{data.me.maxAmountPerTransactionDollar}</TableCell>\n                              </TableRow>\n                          </TableBody>\n                        </Table>\n                      </TableContainer>)\n                }\n            </div>\n      </main>\n    );\n}\n","import { Container, CssBaseline, AppBar, Toolbar, Typography, Drawer, List, ListItem, Divider, Theme, Table, TableContainer, Paper, TableBody, TableRow, TableCell, Card, CardContent, CardActions, Button, Grid } from '@material-ui/core';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useMeQuery, useCurrencyAccountsQuery } from '../graphql/types';\n\nconst useStyles = makeStyles({\n    card: {\n        marginTop: '10px',\n        minWidth: 275,\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    }\n});\n  \n\nexport const CurrencyAccountPage : React.FC = () => {\n\n    const classes = useStyles();\n\n    gql` query currencyAccounts {\n        me {\n            currencyAccounts {\n                id,\n                balance,\n                walletId,\n                currency {\n                    name,\n                    exchangeRateDollar\n                }\n            }\n        }\n    }`\n\n    const { data } = useCurrencyAccountsQuery();\n\n    return (\n        <Container maxWidth=\"md\">\n            <Grid container justify=\"center\">  \n                <Grid item md={8}>\n                    <h3>Your Currency Accounts</h3>\n                    <div>\n                        { data &&\n                            data.me.currencyAccounts.map((currencyAccount) => (\n                            <Card className={classes.card} variant=\"outlined\">\n                                <CardContent>\n                                    <Typography variant=\"h5\" component=\"h2\">\n                                            {currencyAccount.currency.name}\n                                    </Typography>\n                                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                                        {currencyAccount.walletId}\n                                    </Typography>\n                                    <Typography className={classes.pos} color=\"textSecondary\">\n                                        {currencyAccount.balance} coins\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n                            ))\n                        }\n\n                        <Button variant=\"contained\" color=\"primary\" component=\"a\" href=\"currencyAccounts/add\">Add Currency Account</Button>\n                    </div>\n                </Grid>\n            </Grid>  \n      </Container>\n    );\n}\n","import Container from '@material-ui/core/Container';\nimport React, { useState } from 'react';\nimport { Grid, Paper, Box, Button, Select, MenuItem, InputLabel, makeStyles } from '@material-ui/core';\nimport gql from 'graphql-tag';\nimport { useLoginMutation, useAddCurrencyAccountMutation, useCurrencyAccountsQuery, useCurrenciesQuery } from '../graphql/types';\nimport { RedirectWhenAuth } from '../authUtils';\nimport { Formik, withFormik, FormikProps, Form, Field } from \"formik\";\nimport { DCTextField } from '../components/DCTextField';\nimport { Redirect } from 'react-router-dom';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst useStyles = makeStyles({\n    paper: {\n        padding: 20\n    }\n})\n\nexport const AddCurrencyAccountPage : React.FC = () => {\n\n    const classes = useStyles();\n\n    gql` query currencies {\n        currencies {\n            id,\n            name,\n            exchangeRateDollar\n        }\n    }`\n\n    gql` mutation addCurrencyAccount($data: CurrencyAccountInput!) {\n        addCurrencyAccount(data: $data) {\n            id\n        }\n    }`;\n\n    const {data: currencies} = useCurrenciesQuery();\n    const [addCurrencyAccount, {data: currencyAccount}] = useAddCurrencyAccountMutation();\n\n    const [currencyName, setCurrencyName] = useState('')\n\n\n    if(currencyAccount) {\n        return <Redirect to=\"/me/currencyAccounts\" />;\n    }\n\n    return (\n        <Container maxWidth=\"md\">\n            <h3>Add Currency Account</h3>\n            <Grid container justify=\"center\" >\n                <Grid item md={6}>\n                    <Paper className={classes.paper}>\n                        { currencies &&\n                            <Formik \n                                onSubmit={(values) => {\n                                    addCurrencyAccount({\n                                        variables: {\n                                            data: {\n                                                ...values,\n                                                currencyName\n                                            }\n                                        }\n                                    })\n                                }}\n                                initialValues={{\n                                    walletId: \"\",\n                                    balance: 0\n                                }}\n                                render= {() => (\n                                    <Form>\n                                        <DCTextField\n                                            label=\"WalletId\"\n                                            name=\"walletId\"\n                                            margin=\"normal\"\n                                            fullWidth= {true}\n                                        />\n                                        <DCTextField\n                                            label=\"Balance\"\n                                            name=\"balance\"\n                                            margin=\"normal\"\n                                            type=\"number\"\n                                            fullWidth= {true}\n                                        />\n                                        <FormControl fullWidth= {true}>\n                                            <InputLabel>Currency</InputLabel>\n                                            <Select\n                                                labelId=\"select-label\"\n                                                id=\"currencyName\"\n                                                value={currencyName}\n                                                name=\"currencyName\"\n                                                onChange={(e) => setCurrencyName(e.target.value as string)}\n                                                >\n                                                {currencies.currencies.map(currency => <MenuItem value={currency.name}>{currency.name}</MenuItem>)}\n                                            </Select>\n                                        </FormControl>\n                                        <div style={{textAlign: 'right'}}>\n                                            <Button variant=\"contained\" color=\"primary\" type='submit'>Add</Button>\n                                        </div>\n                                    </Form>\n                                )\n                            }/>\n                        }\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Container>\n    );\n}","import { Container, Button, Grid, TableCell, TableContainer, TableHead, TableRow, Table, TableBody, Paper } from '@material-ui/core';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useMeQuery, useCurrencyAccountsQuery, useTransactionsQuery } from '../graphql/types';\n\nconst useStyles = makeStyles({\n    card: {\n        marginTop: '10px',\n        minWidth: 275,\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    }\n});\n\nexport const TransactionPage : React.FC = () => {\n\n    const classes = useStyles();\n\n    gql ` query transactions {\n        transactions{\n            id,\n            amount,\n            currency {\n                name\n            },\n            createdAt,\n            processedAt,\n            target {\n                name\n            },\n            source {\n                name\n            },\n            state,\n            error\n        }\n    }`\n\n    const {data: transactions} = useTransactionsQuery();\n\n    if(transactions) {\n        console.log(transactions, null, 3);\n    }\n\n    return (\n        <Container>\n            <Grid container justify=\"center\">  \n                <Grid item md={12}>\n                    <h3>Your Transactions</h3>\n                    <div>\n                        { transactions && \n                            <TableContainer component={Paper}>\n                                <Table aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell align=\"right\">ID</TableCell>\n                                        <TableCell align=\"right\">Currency</TableCell>\n                                        <TableCell align=\"right\">Amount</TableCell>\n                                        <TableCell align=\"right\">Source</TableCell>\n                                        <TableCell align=\"right\">Target</TableCell>\n                                        <TableCell align=\"right\">Created at</TableCell>\n                                        <TableCell align=\"right\">Processed at</TableCell>\n                                        <TableCell align=\"right\">State</TableCell>\n                                        <TableCell align=\"right\">Error</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {transactions.transactions.map(transaction => (\n                                    <TableRow key={transaction.id}>\n                                        <TableCell align=\"right\">{transaction.id}</TableCell>\n                                        <TableCell align=\"right\">{transaction.currency.name}</TableCell>\n                                        <TableCell align=\"right\">{transaction.amount}</TableCell>\n                                        <TableCell align=\"right\">{transaction.source.name}</TableCell>\n                                        <TableCell align=\"right\">{transaction.target.name}</TableCell>\n                                        <TableCell align=\"right\">{transaction.createdAt}</TableCell>\n                                        <TableCell align=\"right\">{transaction.processedAt}</TableCell>\n                                        <TableCell align=\"right\">{transaction.state}</TableCell>\n                                        <TableCell align=\"right\">{transaction.error}</TableCell>\n                                    </TableRow>\n                                    ))}\n                                </TableBody>\n                                </Table>\n                            </TableContainer>\n                        }\n                    </div>\n                    <Button variant=\"contained\" color=\"primary\" component=\"a\" href=\"transactions/submit\">Submit New Transaction</Button>\n                </Grid>\n            </Grid>  \n      </Container>\n    );\n}\n","import Container from '@material-ui/core/Container';\nimport React, { useState } from 'react';\nimport { Grid, Paper, Box, Button, Select, MenuItem, InputLabel, makeStyles } from '@material-ui/core';\nimport gql from 'graphql-tag';\nimport { useSubmitTransactionMutation, useCurrencyAccountsQuery, useCurrenciesQuery, useOtherUsersQuery } from '../graphql/types';\nimport { RedirectWhenAuth } from '../authUtils';\nimport { Formik, withFormik, FormikProps, Form, Field } from \"formik\";\nimport { DCTextField } from '../components/DCTextField';\nimport { Redirect } from 'react-router-dom';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst useStyles = makeStyles({\n    paper: {\n        padding: 20\n    }\n})\n\nexport const SubmitTransactionPage : React.FC = () => {\n\n    const classes = useStyles();\n\n    gql` mutation submitTransaction($data: SubmitTransactionInput!) {\n            submitTransaction(data: $data) {\n                id\n            }\n    }`;\n\n    gql` query otherUsers {\n        otherUsers {\n            id,\n            name\n        }\n    }`;\n\n    const [currencyName, setCurrencyName] = useState('');\n    const [targetUserId, setTargetUserId] = useState('');\n\n    const {data: currencyAccounts} = useCurrencyAccountsQuery();\n    const {data: otherUsers} = useOtherUsersQuery();\n\n    const [submitTransaction, submitTransactionResponse] = useSubmitTransactionMutation();\n\n    if(submitTransactionResponse.data) {\n        return <Redirect to=\"/me/transactions\" />;\n    }\n\n    return (\n        <Container maxWidth=\"md\">\n            <h3>Submit Transaction</h3>\n            <Grid container justify=\"center\" >\n                <Grid item md={6}>\n                    <Paper className={classes.paper}>\n                        { currencyAccounts && otherUsers &&\n                            <Formik \n                                onSubmit={(values) => {\n                                    submitTransaction({\n                                        variables: {\n                                            data: {\n                                                amount: values.amount,\n                                                currencyName,\n                                                targetUserId\n                                            }\n                                        }\n                                    })\n                                }}\n                                initialValues={{\n                                    amount: 0\n                                }}\n                                render= {() => (\n                                    <Form>\n                                        <FormControl fullWidth= {true}>\n                                            <InputLabel>Currency</InputLabel>\n                                            <Select\n                                                labelId=\"select-label\"\n                                                id=\"currencyName\"\n                                                value={currencyName}\n                                                name=\"currencyName\"\n                                                onChange={(e) => setCurrencyName(e.target.value as string)}\n                                                >\n                                                {currencyAccounts.me.currencyAccounts.map(\n                                                    currencyAccount => <MenuItem value={currencyAccount.currency.name}>{currencyAccount.currency.name}</MenuItem>\n                                                )}\n                                            </Select>\n                                        </FormControl>\n                                        <FormControl fullWidth= {true}>\n                                            <InputLabel>Target User</InputLabel>\n                                            <Select\n                                                labelId=\"targetUser\"\n                                                id=\"targetUser\"\n                                                value={targetUserId}\n                                                name=\"targetUser\"\n                                                onChange={(e) => setTargetUserId(e.target.value as string)}\n                                                >\n                                                {otherUsers.otherUsers.map(\n                                                    otherUser => <MenuItem value={otherUser.id}>{otherUser.name}</MenuItem>\n                                                )}\n                                            </Select>\n                                        </FormControl>\n                                        <DCTextField\n                                            label=\"Amount\"\n                                            name=\"amount\"\n                                            margin=\"normal\"\n                                            type=\"number\"\n                                            fullWidth= {true}\n                                        />\n                                        <div style={{textAlign: 'right'}}>\n                                            <Button variant=\"contained\" color=\"primary\" type='submit'>Add</Button>\n                                        </div>\n                                    </Form>\n                                )\n                            }/>\n                        }\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Container>\n    );\n}","import React, { PropsWithChildren, useState } from 'react';\nimport { Route, RouteComponentProps, Switch, Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { CssBaseline, AppBar, Toolbar, Typography, Drawer, List, ListItem, makeStyles, Theme } from '@material-ui/core';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { getLocalUser, deleteLocalUser } from '../authUtils';\nimport theme from '../theme';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { AccountPage } from './AccountPage';\nimport { CurrencyAccountPage } from './CurrencyAccountPage';\nimport { AddCurrencyAccountPage } from './AddCurrencyAccountPage';\nimport { TransactionPage } from './TransactionPage';\nimport { SubmitTransactionPage } from './SubmitTransactionPage';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    marginRight: theme.spacing(2),\n  },\n  menuItems: {\n    marginLeft: 'auto'\n  }\n}));\n\n\nexport function MeLayout(props: RouteComponentProps) {\n    \n  const classes = useStyles();\n\n  const [, updateState] = useState();\n\n  if(!getLocalUser())\n        return (<Redirect to='/login' />);\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Salamantex Transactions\n          </Typography>\n            <div className={classes.menuItems}>\n                \n            {[\n                {\n                    name: 'Transactions',\n                    link: '/transactions'\n                }, \n                {\n                    name: 'Currency Accounts',\n                    link: '/currencyAccounts'\n                },\n                { \n                    name: 'Account',\n                    link: '/account'\n                }\n            ].map((el, index) => (\n            <Button color=\"inherit\" component=\"a\" key={el.name} href={'/me'+el.link}>\n                {el.name}\n            </Button>\n            ))}\n            <Button color=\"inherit\" onClick={() => {\n                deleteLocalUser();\n                updateState({});\n            }}>\n                Logout\n            </Button>\n        </div>\n        </Toolbar>\n    </AppBar>\n    <div>\n        <Route exact path={`${props.match.path}/account`} component={AccountPage} />\n        <Route exact path={`${props.match.path}/currencyAccounts`} component={CurrencyAccountPage} />\n        <Route exact path={`${props.match.path}/currencyAccounts/add`} component={AddCurrencyAccountPage} />\n        <Route exact path={`${props.match.path}/transactions`} component={TransactionPage} />\n        <Route exact path={`${props.match.path}/transactions/submit`} component={SubmitTransactionPage} />\n    </div>\n    </div>\n  );\n}","import Container from '@material-ui/core/Container';\nimport React from 'react';\nimport { Grid, Paper, Button, makeStyles } from '@material-ui/core';\nimport gql from 'graphql-tag';\nimport { useRegisterMutation } from '../graphql/types';\nimport { RedirectWhenAuth, setLocalUser } from '../authUtils';\nimport { Formik, Form } from \"formik\";\nimport { DCTextField } from '../components/DCTextField';\n\nconst useStyles = makeStyles({\n    root: {\n        marginTop: 100\n    },\n    paper: {\n        padding: 20\n    },\n    orLoginButton: {\n        textDecoration:\"none\",\n        color: '#005ff8'\n    }\n})\n\nexport const RegisterPage : React.FC = () => {\n\n    const classes = useStyles();\n\n    gql` mutation register($data: RegisterInput!) {\n        register(data: $data) {\n            token,\n            user {\n                id,\n                name\n            }\n        }\n    }`;\n\n    const [register, registerRes] = useRegisterMutation();\n    \n    if(registerRes.data) {\n        setLocalUser(registerRes.data.register);\n    }\n\n    return (\n        <RedirectWhenAuth>\n            <Container className={classes.root} maxWidth=\"md\">\n                <Grid container justify=\"center\" >\n                    <Grid item md={6}>\n                        <Paper className={classes.paper}>\n                            <h3>Register</h3> \n                            <span>\n                                or \n                                <a href=\"/login\" className={classes.orLoginButton} > login</a>\n                            </span>\n                            <Formik \n                                onSubmit={async (values) => {\n                                    await register({\n                                        variables: {\n                                            data: values\n                                        }\n                                    })\n                                }}\n                                initialValues={{\n                                    name: \"\",\n                                    email: \"\",\n                                    password: \"\",\n                                    maxAmountPerTransactionDollar: 0\n                                }}\n                                render= {(formikBag) => (\n                                    <Form>\n                                        <DCTextField\n                                            label=\"Name\"\n                                            name=\"name\"\n                                            margin=\"normal\"\n                                            fullWidth= {true}\n                                        />\n                                        <DCTextField\n                                            label=\"E-Mail\"\n                                            name=\"email\"\n                                            margin=\"normal\"\n                                            type=\"email\"\n                                            fullWidth= {true}\n                                        />\n                                        <DCTextField\n                                            label=\"Password\"\n                                            name=\"password\"\n                                            margin=\"normal\"\n                                            type=\"password\"\n                                            fullWidth={true}\n                                        />\n                                        <DCTextField\n                                            label=\"Description\"\n                                            name=\"description\"\n                                            margin=\"normal\"\n                                            fullWidth={true}\n                                        />\n                                        <DCTextField\n                                            label=\"Max amount per transcation ($)\"\n                                            name=\"maxAmountPerTransactionDollar\"\n                                            margin=\"normal\"\n                                            type=\"number\"\n                                            fullWidth={true}\n                                        />\n                                        <div style={{textAlign: 'right'}}>\n                                            <Button variant=\"contained\" color=\"primary\" type='submit'>Register</Button>\n                                        </div>\n                                    </Form>\n                                )\n                            }/>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n        </RedirectWhenAuth>\n    );\n}","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { LoginPage } from './pages/LoginPage';\nimport { BrowserRouter, Route, Redirect } from 'react-router-dom';\nimport { Container, MuiThemeProvider } from '@material-ui/core';\nimport theme from './theme';\nimport { MeLayout } from './pages/MeLayout';\nimport { getLocalUser, deleteLocalUser } from './authUtils';\nimport { RegisterPage } from './pages/RegisterPage';\nimport { SnackbarProvider, useSnackbar } from 'notistack';\n\n\nconst App: React.FC = () => {\n\n  const [, updateState] = useState();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const client = new ApolloClient({\n    uri: 'http://localhost:4000',\n    request: (operation) => {\n     const localUser = getLocalUser();\n      if(localUser) {\n        const token = localUser.token;\n        operation.setContext({\n          headers: {\n            authorization: token ? token : ''\n          }\n        })\n      }\n    },\n    onError(err) {\n      if(err && err.graphQLErrors) {\n\n        enqueueSnackbar(err.graphQLErrors[0].message, {\n          variant: 'error',\n          anchorOrigin: {\n              vertical: 'bottom',\n              horizontal: 'center'\n          },\n          autoHideDuration: 4000\n        })\n\n        if( err.graphQLErrors[0].message === 'Not Authorised!') {\n          deleteLocalUser();\n          updateState({});\n        }\n      }\n    }\n  });\n\n\n\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <MuiThemeProvider theme={theme}>\n            <Container>\n              <BrowserRouter>\n                  <Route exact path=\"/login\" component={LoginPage} />\n                  <Route exact path=\"/register\" component={RegisterPage} />\n                  <Route path=\"/me\" component={MeLayout} />\n                  <Route exact path=\"/\" render={() => <Redirect to=\"/login\" />} />\n              </BrowserRouter>\n            </Container>\n        </MuiThemeProvider>\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { SnackbarProvider } from 'notistack';\n\nReactDOM.render(<SnackbarProvider><App /></SnackbarProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}